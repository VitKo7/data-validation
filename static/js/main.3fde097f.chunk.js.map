{"version":3,"sources":["components/Uploader.js","validators/index.js","components/DataTable.js","App.js","index.js"],"names":["Uploader","setData","setFile","config","header","skipEmptyLines","style","dropArea","width","margin","onError","err","file","inputElem","reason","console","log","addRemoveButton","onRemoveFile","data","onDrop","dataWithId","map","index","id","isPhoneValid","value","length","Number","isInteger","slice","isAgeValid","isIncomeValid","toFixed","hasChildren","toLowerCase","toUpperCase","isStatesValid","split","el","trim","join","isExpDateValid","moment","isValid","isAfter","isLicenseValid","test","isDuplicate","item","elem","DataTable","validValues","every","isValidData","name","isCSV","className","classnames","invalid","exp","age","App","useState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fde097f.chunk.js","sourcesContent":["import { CSVReader } from 'react-papaparse';\r\n\r\nexport const Uploader = ({ setData, setFile }) => {\r\n  const handleOnDrop = (data, file) => {\r\n    console.log(data);\r\n    console.log(file);\r\n    const dataWithId = data.map(({ data }, index) => ({\r\n      ...data,\r\n      id: index + 1,\r\n    }));\r\n    console.log(dataWithId);\r\n    setData(dataWithId);\r\n    setFile(file);\r\n  };\r\n\r\n  const handleOnError = (err, file, inputElem, reason) => {\r\n    console.log(err);\r\n  };\r\n\r\n  const handleOnRemoveFile = data => {\r\n    console.log(data);\r\n    setData(null);\r\n  };\r\n\r\n  return (\r\n    <CSVReader\r\n      config={{ header: true, skipEmptyLines: true }}\r\n      style={{ dropArea: { width: '50vw', margin: '0 auto' } }}\r\n      onError={handleOnError}\r\n      addRemoveButton\r\n      onRemoveFile={handleOnRemoveFile}\r\n      onDrop={handleOnDrop}\r\n    >\r\n      <span>Drop CSV file here or click to upload.</span>\r\n    </CSVReader>\r\n  );\r\n};\r\n","import moment from 'moment';\r\n\r\nexport const errorMessage =\r\n  'Your file could not be load. Please, check the fields \"Full Name\", \"Phone\", \"Email\" are not empty and file extension is \".csv\"';\r\n\r\nexport const isValidData = data => {\r\n  const validValues = data.map(item => {\r\n    return [item['Full Name'], item['Phone'], item['Email']];\r\n  });\r\n  for (let values of validValues) {\r\n    return values.every(value => !!value);\r\n  }\r\n};\r\n\r\nexport const isCSV = file => {\r\n  return file.name.toLowerCase().split('.')[1] === 'csv';\r\n};\r\n\r\nexport const isPhoneValid = value => {\r\n  if (value.length < 10 || value.length > 12) return false;\r\n  if (value.length === 10 && Number.isInteger(+value)) return `+1${value}`;\r\n  if (value.length === 11 && Number.isInteger(+value) && value[0] === '1')\r\n    return `+${value}`;\r\n  if (\r\n    value.length === 12 &&\r\n    value.slice(0, 2) === '+1' &&\r\n    Number.isInteger(+value.slice(-10))\r\n  )\r\n    return value;\r\n  return false;\r\n};\r\n\r\nexport const isEmailValid = value => {\r\n  const re = /[^@]+@[^\\.]+\\..+/g;\r\n  return re.test(value);\r\n};\r\n\r\nexport const isAgeValid = value => +value >= 21 && Number.isInteger(+value);\r\n\r\nexport const isExperienceValid = (exp, age) => {\r\n  return +exp >= 0 && +exp <= age - 21;\r\n};\r\n\r\nexport const isIncomeValid = value => {\r\n  if (value >= 0 && value <= 1000000) {\r\n    return (+value).toFixed(2);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const hasChildren = value => {\r\n  if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\r\n    return value.toUpperCase();\r\n  }\r\n  if (!value) return 'FALSE';\r\n  return false;\r\n};\r\n\r\nexport const isStatesValid = value => {\r\n  return value\r\n    .split('|')\r\n    .map(el => el.trim())\r\n    .join(', ');\r\n};\r\n\r\nexport const isExpDateValid = value => {\r\n  if (\r\n    (moment(value, 'YYYY-MM-DD').isValid() ||\r\n      moment(value, 'MM/DD/YYYY').isValid()) &&\r\n    moment(value).isAfter(moment())\r\n  )\r\n    return true;\r\n  return false;\r\n};\r\n\r\nexport const isLicenseValid = value => {\r\n  const re = /^\\w*\\d*$/g;\r\n  if (value.length !== 6) return false;\r\n  return re.test(value);\r\n};\r\n\r\nexport const isDuplicate = (data, item) =>\r\n  data.map(elem => {\r\n    if (\r\n      (elem['Phone'] === item['Phone'] && elem.id != item.id) ||\r\n      (elem['Email'].toLowerCase() === item['Email'].toLowerCase() &&\r\n        elem.id != item.id)\r\n    ) {\r\n      return elem.id;\r\n    }\r\n  });\r\n","import classnames from 'classnames';\r\nimport {\r\n  isValidData,\r\n  isCSV,\r\n  errorMessage,\r\n  isPhoneValid,\r\n  isEmailValid,\r\n  isAgeValid,\r\n  isExperienceValid,\r\n  isIncomeValid,\r\n  hasChildren,\r\n  isStatesValid,\r\n  isExpDateValid,\r\n  isLicenseValid,\r\n  isDuplicate,\r\n} from '../validators';\r\n\r\nexport const DataTable = ({ data, file }) => {\r\n  return !isValidData(data) || !isCSV(file) ? (\r\n    <div className=\"error\">{errorMessage}</div>\r\n  ) : (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Id</th>\r\n          <th>Full Name</th>\r\n          <th>Phone</th>\r\n          <th>Email</th>\r\n          <th>Age</th>\r\n          <th>Experience</th>\r\n          <th>Yearly Income</th>\r\n          <th>Has children</th>\r\n          <th>License states</th>\r\n          <th>Expiration date</th>\r\n          <th>License number</th>\r\n          <th>Dublicate with</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((item, index) => (\r\n          <tr key={index}>\r\n            <td>{item.id}</td>\r\n            <td>{item['Full Name']}</td>\r\n            <td\r\n              className={classnames({ invalid: !isPhoneValid(item['Phone']) })}\r\n            >\r\n              {isPhoneValid(item['Phone'])\r\n                ? isPhoneValid(item['Phone'])\r\n                : item['Phone']}\r\n            </td>\r\n            <td\r\n              className={classnames({ invalid: !isEmailValid(item['Email']) })}\r\n            >\r\n              {item['Email']}\r\n            </td>\r\n            <td className={classnames({ invalid: !isAgeValid(item['Age']) })}>\r\n              {item['Age']}\r\n            </td>\r\n            <td\r\n              className={classnames({\r\n                invalid: !isExperienceValid(item['Experience'], item['Age']),\r\n              })}\r\n            >\r\n              {item['Experience']}\r\n            </td>\r\n            <td\r\n              className={classnames({\r\n                invalid: !isIncomeValid(item['Yearly Income']),\r\n              })}\r\n            >\r\n              {isIncomeValid(item['Yearly Income'])\r\n                ? isIncomeValid(item['Yearly Income'])\r\n                : item['Yearly Income']}\r\n            </td>\r\n            <td\r\n              className={classnames({\r\n                invalid: !hasChildren(item['Has children']),\r\n              })}\r\n            >\r\n              {hasChildren(item['Has children'])\r\n                ? hasChildren(item['Has children'])\r\n                : item['Has children']}\r\n            </td>\r\n            <td\r\n              className={classnames({\r\n                invalid: !isStatesValid(item['License states']),\r\n              })}\r\n            >\r\n              {isStatesValid(item['License states'])}\r\n            </td>\r\n            <td\r\n              className={classnames({\r\n                invalid: !isExpDateValid(item['Expiration date']),\r\n              })}\r\n            >\r\n              {item['Expiration date']}\r\n            </td>\r\n            <td\r\n              className={classnames({\r\n                invalid: !isLicenseValid(item['License number']),\r\n              })}\r\n            >\r\n              {item['License number']}\r\n            </td>\r\n            <td>{isDuplicate(data, item)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n","import { useState } from 'react';\nimport { Uploader } from './components/Uploader';\nimport { DataTable } from './components/DataTable';\nimport './App.css';\n\n// import UsersValidation from './components/UsersValidation/UsersValidation';\n\nexport default function App() {\n  const [data, setData] = useState(null);\n  const [file, setFile] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Uploader setData={setData} setFile={setFile} />\n      {data && file && <DataTable data={data} file={file} />}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}